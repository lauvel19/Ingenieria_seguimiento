import random
import re
from datetime import datetime


class EnhancedIntelligentAgent:
    def __init__(self):
        self.context = []
        self.user_name = None
        self.conversation_count = 0
        self.last_topic = None
        self.awaiting_response = None  # Para conversaciones de seguimiento
        self.explanation_depth = 0  # Para saber qu√© tan profundo ir

        # Patrones de respuesta para seguimiento
        self.follow_up_patterns = {
            "affirmative": [
                r"s√≠|si|yes|claro|perfecto|dale|ok|est√° bien|me gustar√≠a|quiero|por favor",
                r"h√°blame|expl√≠came|cu√©ntame|dime|ens√©√±ame"
            ],
            "negative": [
                r"no|nah|no gracias|paso|mejor no|otro tema|cambiar",
                r"ya entend√≠|suficiente|otro"
            ],
            "more_info": [
                r"m√°s|otro ejemplo|otra|contin√∫a|sigue|profundiza|m√°s detalles|ampl√≠a",
                r"qu√© m√°s|y qu√©|tambi√©n|adem√°s"
            ]
        }

        # Ejemplos y explicaciones detalladas
        self.detailed_explanations = {
            "deductive_basic": """
üß† **Razonamiento Deductivo Explicado:**

El razonamiento deductivo es como ser un detective que sigue pistas 100% confiables. 

**üîç Caracter√≠sticas principales:**
‚Ä¢ Va de lo GENERAL a lo ESPEC√çFICO
‚Ä¢ Si las premisas son verdaderas, la conclusi√≥n ES NECESARIAMENTE verdadera
‚Ä¢ Es el tipo de razonamiento m√°s riguroso y confiable

**üìù Estructura b√°sica:**
1. **Premisa Mayor:** Una regla general (Ej: "Todos los humanos son mortales")
2. **Premisa Menor:** Un caso espec√≠fico (Ej: "S√≥crates es humano") 
3. **Conclusi√≥n:** Lo que se deduce necesariamente (Ej: "S√≥crates es mortal")

**‚úÖ ¬øPor qu√© funciona?**
Porque si TODOS los humanos son mortales (regla universal) y S√≥crates ES humano (caso particular), entonces l√≥gicamente S√≥crates DEBE ser mortal.
            """,

            "deductive_examples": [
                {
                    "title": "üè• Ejemplo M√©dico",
                    "premise1": "Todos los antibi√≥ticos combaten bacterias",
                    "premise2": "La penicilina es un antibi√≥tico",
                    "conclusion": "La penicilina combate bacterias",
                    "explanation": "Este es un silogismo perfecto: regla m√©dica + clasificaci√≥n espec√≠fica = conclusi√≥n v√°lida"
                },
                {
                    "title": "üî¢ Ejemplo Matem√°tico",
                    "premise1": "Todos los n√∫meros pares son divisibles por 2",
                    "premise2": "El 14 es un n√∫mero par",
                    "conclusion": "El 14 es divisible por 2",
                    "explanation": "En matem√°ticas, las reglas son absolutas, por eso la deducci√≥n es tan poderosa"
                },
                {
                    "title": "üåç Ejemplo Geogr√°fico",
                    "premise1": "Todas las capitales europeas est√°n en Europa",
                    "premise2": "Madrid es una capital europea",
                    "conclusion": "Madrid est√° en Europa",
                    "explanation": "Definiciones geogr√°ficas claras nos dan conclusiones incuestionables"
                }
            ],

            "inductive_basic": """
üîç **Razonamiento Inductivo Explicado:**

El razonamiento inductivo es como ser un cient√≠fico que descubre patrones observando el mundo.

**üåü Caracter√≠sticas principales:**
‚Ä¢ Va de lo ESPEC√çFICO a lo GENERAL
‚Ä¢ Las conclusiones son PROBABLES, no garantizadas
‚Ä¢ Es fundamental para el m√©todo cient√≠fico y el aprendizaje

**üìä Proceso:**
1. **Observar:** Casos espec√≠ficos (Ej: "Cisne 1 es blanco, Cisne 2 es blanco...")
2. **Identificar patr√≥n:** Buscar regularidades (Ej: "Todos los cisnes observados son blancos")
3. **Generalizar:** Crear una regla (Ej: "Todos los cisnes son blancos")

**‚ö†Ô∏è Limitaciones importantes:**
‚Ä¢ Una sola excepci√≥n puede derribar la regla (cisnes negros existen!)
‚Ä¢ La calidad de la muestra es crucial
‚Ä¢ M√°s observaciones = mayor confianza, pero nunca certeza absoluta

**üß™ ¬øPor qu√© es valioso?**
Sin inducci√≥n no tendr√≠amos ciencia, no podr√≠amos aprender de la experiencia ni formar hip√≥tesis sobre el mundo.
            """,

            "inductive_examples": [
                {
                    "title": "ü¶¢ El Famoso Cisne Negro",
                    "observations": ["Cisne 1: blanco", "Cisne 2: blanco", "Cisne 3: blanco", "Cisne 4: blanco"],
                    "generalization": "Todos los cisnes son blancos",
                    "plot_twist": "¬°Pero existen cisnes negros en Australia!",
                    "lesson": "Una sola excepci√≥n puede derribar toda la teor√≠a inductiva"
                },
                {
                    "title": "‚òÄÔ∏è Patr√≥n Solar",
                    "observations": ["El sol sali√≥ ayer", "El sol sali√≥ hoy", "El sol ha salido todos los d√≠as"],
                    "generalization": "El sol siempre sale",
                    "strength": "ALTA - millones de observaciones consistentes",
                    "lesson": "M√°s observaciones = mayor confianza en el patr√≥n"
                },
                {
                    "title": "üçé Gravedad Observada",
                    "observations": ["La manzana cae", "La piedra cae", "La lluvia cae", "Todo objeto cae"],
                    "generalization": "Todos los objetos caen hacia abajo",
                    "evolution": "Newton: ley de gravedad ‚Üí Einstein: curvatura del espacio-tiempo",
                    "lesson": "Las generalizaciones inductivas pueden evolucionar con nueva evidencia"
                }
            ]
        }

        # Patrones mejorados con manejo de seguimiento
        self.patterns = {
            "greetings": {
                "patterns": [
                    r"hola|hi|hello|buenos d√≠as|buenas tardes|buenas noches|saludos",
                    r"qu√© tal|c√≥mo est√°s|how are you"
                ],
                "responses": [
                    "¬°Hola! üòä Soy tu asistente especializado en razonamiento l√≥gico. Puedo explicarte sobre deducci√≥n, inducci√≥n, agentes inteligentes y resoluci√≥n de problemas. ¬øQu√© te gustar√≠a explorar primero?",
                    "¬°Perfecto que est√©s aqu√≠! üåü Soy experto en l√≥gica y IA. Podemos conversar sobre razonamiento deductivo (de general a espec√≠fico), inductivo (de espec√≠fico a general), o cualquier concepto de inteligencia artificial. ¬øPor d√≥nde empezamos?",
                    "¬°Bienvenido al mundo del razonamiento l√≥gico! üß† Estoy aqu√≠ para ayudarte a entender c√≥mo funcionan los diferentes tipos de pensamiento l√≥gico. ¬øTe interesa m√°s la deducci√≥n rigurosa o la inducci√≥n cient√≠fica?"
                ]
            },

            "reasoning_deductive_request": {
                "patterns": [
                    r"razonamiento deductivo|deducci√≥n|deductivo|expl√≠came.*deductivo",
                    r"qu√© es.*deductivo|c√≥mo funciona.*deductivo|h√°blame.*deductivo"
                ],
                "responses": [
                    lambda: self.get_deductive_explanation(),
                    lambda: self.get_deductive_explanation_with_example()
                ]
            },

            "reasoning_inductive_request": {
                "patterns": [
                    r"razonamiento inductivo|inducci√≥n|inductivo|expl√≠came.*inductivo",
                    r"qu√© es.*inductivo|c√≥mo funciona.*inductivo|h√°blame.*inductivo"
                ],
                "responses": [
                    lambda: self.get_inductive_explanation(),
                    lambda: self.get_inductive_explanation_with_example()
                ]
            },

            "example_request": {
                "patterns": [
                    r"ejemplo|ejemplos|mu√©strame|ponme un ejemplo|dame un ejemplo",
                    r"c√≥mo ser√≠a|ilustra|demuestra"
                ],
                "responses": [
                    lambda: self.provide_contextual_example()
                ]
            },

            "practice_request": {
                "patterns": [
                    r"practicar|pr√°ctica|entrenar|ejercicio|ejercicios|probar",
                    r"quiero intentar|d√©jame probar|c√≥mo lo hago"
                ],
                "responses": [
                    lambda: self.suggest_practice()
                ]
            }
        }

    def get_deductive_explanation(self):
        self.awaiting_response = "deductive_follow_up"
        return self.detailed_explanations[
            "deductive_basic"] + "\n\nüí° ¬øTe gustar√≠a que te muestre algunos ejemplos concretos para verlo en acci√≥n?"

    def get_deductive_explanation_with_example(self):
        self.awaiting_response = "deductive_more_examples"
        explanation = self.detailed_explanations["deductive_basic"]
        example = random.choice(self.detailed_explanations["deductive_examples"])

        result = explanation + f"\n\n{example['title']}\n"
        result += f"üìã **Premisa 1:** {example['premise1']}\n"
        result += f"üìã **Premisa 2:** {example['premise2']}\n"
        result += f"‚úÖ **Conclusi√≥n:** {example['conclusion']}\n"
        result += f"üí≠ **¬øPor qu√© funciona?** {example['explanation']}\n\n"
        result += "¬øQuieres ver m√°s ejemplos o prefieres que practiquemos juntos?"

        return result

    def get_inductive_explanation(self):
        self.awaiting_response = "inductive_follow_up"
        return self.detailed_explanations[
            "inductive_basic"] + "\n\nüî¨ ¬øTe muestro algunos ejemplos fascinantes para que veas c√≥mo funciona en la pr√°ctica?"

    def get_inductive_explanation_with_example(self):
        self.awaiting_response = "inductive_more_examples"
        explanation = self.detailed_explanations["inductive_basic"]
        example = random.choice(self.detailed_explanations["inductive_examples"])

        result = explanation + f"\n\n{example['title']}\n"
        result += f"üìä **Observaciones:** {', '.join(example['observations'])}\n"
        result += f"üìà **Generalizaci√≥n:** {example['generalization']}\n"

        if 'plot_twist' in example:
            result += f"üé≠ **Plot twist:** {example['plot_twist']}\n"
        if 'strength' in example:
            result += f"üí™ **Fortaleza:** {example['strength']}\n"
        if 'evolution' in example:
            result += f"üîÑ **Evoluci√≥n:** {example['evolution']}\n"

        result += f"üéì **Lecci√≥n:** {example['lesson']}\n\n"
        result += "¬øQuieres explorar m√°s ejemplos o te explico las limitaciones del razonamiento inductivo?"

        return result

    def provide_contextual_example(self):
        if self.last_topic == "reasoning_deductive_request":
            return self.get_random_deductive_example()
        elif self.last_topic == "reasoning_inductive_request":
            return self.get_random_inductive_example()
        else:
            return "¬øDe qu√© tema te gustar√≠a un ejemplo? ¬øRazonamiento deductivo, inductivo, agentes inteligentes o resoluci√≥n de problemas?"

    def get_random_deductive_example(self):
        self.awaiting_response = "deductive_more_examples"
        example = random.choice(self.detailed_explanations["deductive_examples"])

        result = f"üéØ {example['title']}\n\n"
        result += f"**1. Premisa Mayor:** {example['premise1']}\n"
        result += f"**2. Premisa Menor:** {example['premise2']}\n"
        result += f"**3. Conclusi√≥n:** {example['conclusion']}\n\n"
        result += f"üí° **Explicaci√≥n:** {example['explanation']}\n\n"
        result += "¬øTe muestro otro ejemplo o quieres que practiquemos creando uno juntos?"

        return result

    def get_random_inductive_example(self):
        self.awaiting_response = "inductive_more_examples"
        example = random.choice(self.detailed_explanations["inductive_examples"])

        result = f"üîç {example['title']}\n\n"
        result += "**Proceso inductivo paso a paso:**\n"
        result += f"1. **Observaciones:** {', '.join(example['observations'])}\n"
        result += f"2. **Patr√≥n identificado:** {example['generalization']}\n"

        if 'plot_twist' in example:
            result += f"3. **¬°Sorpresa!** {example['plot_twist']}\n"
        if 'strength' in example:
            result += f"3. **Evaluaci√≥n:** {example['strength']}\n"

        result += f"\nüéì **¬øQu√© aprendemos?** {example['lesson']}\n\n"
        result += "¬øExploramos otro ejemplo o te explico c√≥mo evaluar la fortaleza de las generalizaciones inductivas?"

        return result

    def suggest_practice(self):
        if self.last_topic == "reasoning_deductive_request":
            self.awaiting_response = "practice_deductive"
            return """üéÆ **¬°Practiquemos razonamiento deductivo!**

Te voy a dar dos premisas y t√∫ me dices qu√© conclusi√≥n se puede deducir:

**Premisa 1:** Todos los estudiantes universitarios tienen carnet estudiantil
**Premisa 2:** Mar√≠a es estudiante universitaria

ü§î **Tu turno:** ¬øQu√© puedes concluir sobre Mar√≠a?

üí° **Pista:** Recuerda que en deducci√≥n, si las premisas son verdaderas, la conclusi√≥n debe ser necesariamente verdadera."""

        elif self.last_topic == "reasoning_inductive_request":
            self.awaiting_response = "practice_inductive"
            return """üß™ **¬°Practiquemos razonamiento inductivo!**

Te voy a dar algunas observaciones y t√∫ me dices qu√© patr√≥n puedes identificar:

**Observaciones:**
‚Ä¢ El lunes el caf√© de la cafeter√≠a estaba caliente
‚Ä¢ El martes el caf√© de la cafeter√≠a estaba caliente  
‚Ä¢ El mi√©rcoles el caf√© de la cafeter√≠a estaba caliente
‚Ä¢ El jueves el caf√© de la cafeter√≠a estaba caliente

ü§î **Tu turno:** ¬øQu√© generalizaci√≥n puedes hacer? ¬øQu√© limitaciones tendr√≠a esa generalizaci√≥n?

üí° **Pista:** Piensa en el patr√≥n, pero tambi√©n en qu√© podr√≠a fallar."""

        else:
            return "¬øQu√© te gustar√≠a practicar? ¬øRazonamiento deductivo (crear conclusiones l√≥gicas) o inductivo (identificar patrones)?"

    def handle_follow_up(self, user_input):
        """Maneja las respuestas de seguimiento seg√∫n el contexto"""

        # Detectar tipo de respuesta
        response_type = self.detect_response_type(user_input)

        if self.awaiting_response == "deductive_follow_up":
            if response_type == "affirmative":
                return self.get_random_deductive_example()
            elif response_type == "negative":
                return "¬°Perfecto! ¬øHay alg√∫n otro tema sobre razonamiento l√≥gico que te interese? Puedo explicarte sobre inducci√≥n, agentes inteligentes o resoluci√≥n de problemas."
            elif response_type == "more_info":
                return self.get_deductive_explanation_with_example()

        elif self.awaiting_response == "inductive_follow_up":
            if response_type == "affirmative":
                return self.get_random_inductive_example()
            elif response_type == "negative":
                return "¬°Entendido! ¬øTe interesa explorar otro tipo de razonamiento? Podemos hablar de deducci√≥n, agentes inteligentes o c√≥mo representar problemas."
            elif response_type == "more_info":
                return self.get_inductive_explanation_with_example()

        elif self.awaiting_response == "deductive_more_examples":
            if response_type == "affirmative" or "otro" in user_input.lower():
                return self.get_random_deductive_example()
            elif "practi" in user_input.lower():
                return self.suggest_practice()

        elif self.awaiting_response == "inductive_more_examples":
            if response_type == "affirmative" or "otro" in user_input.lower():
                return self.get_random_inductive_example()
            elif "limita" in user_input.lower():
                return self.explain_inductive_limitations()

        elif self.awaiting_response == "practice_deductive":
            return self.evaluate_deductive_practice(user_input)

        elif self.awaiting_response == "practice_inductive":
            return self.evaluate_inductive_practice(user_input)

        return None

    def detect_response_type(self, user_input):
        """Detecta el tipo de respuesta del usuario"""
        user_input_lower = user_input.lower()

        for response_type, patterns in self.follow_up_patterns.items():
            for pattern in patterns:
                if re.search(pattern, user_input_lower):
                    return response_type
        return "other"

    def explain_inductive_limitations(self):
        self.awaiting_response = None
        return """‚ö†Ô∏è **Limitaciones del Razonamiento Inductivo:**

**1. ü¶¢ El Problema del Cisne Negro**
‚Ä¢ Una sola excepci√≥n puede derribar toda la teor√≠a
‚Ä¢ Ejemplo: "Todos los cisnes son blancos" se derrumba con un cisne negro

**2. üìä Sesgo de Muestra**
‚Ä¢ Muestras peque√±as ‚Üí generalizaciones poco confiables
‚Ä¢ Muestras sesgadas ‚Üí conclusiones err√≥neas

**3. üîÑ Falacia Post Hoc**
‚Ä¢ Confundir correlaci√≥n con causaci√≥n
‚Ä¢ "Cada vez que uso paraguas llueve" ‚â† "Mi paraguas causa lluvia"

**4. ‚è∞ Dependencia Temporal**
‚Ä¢ Los patrones pueden cambiar con el tiempo
‚Ä¢ "Las acciones siempre suben" (hasta que no...)

**üéì ¬øPor qu√© seguimos usando inducci√≥n?**
¬°Porque sin ella no tendr√≠amos ciencia! Es nuestra herramienta para descubrir el mundo, pero siempre con humildad y disposici√≥n a cambiar cuando llegue nueva evidencia.

¬øTe interesa alg√∫n ejemplo espec√≠fico de estas limitaciones?"""

    def evaluate_deductive_practice(self, user_input):
        self.awaiting_response = None

        # Buscar palabras clave de la respuesta correcta
        if any(word in user_input.lower() for word in
               ["carnet", "carn√©", "estudiantil", "tiene carnet", "tiene carn√©"]):
            return """üéâ **¬°Excelente!** 

‚úÖ **Respuesta correcta:** Mar√≠a tiene carnet estudiantil.

üß† **¬øPor qu√© es correcta?**
‚Ä¢ Premisa Mayor: TODOS los estudiantes universitarios tienen carnet (regla universal)
‚Ä¢ Premisa Menor: Mar√≠a ES estudiante universitaria (caso particular)  
‚Ä¢ Conclusi√≥n: Mar√≠a DEBE tener carnet (consecuencia l√≥gica necesaria)

Este es un silogismo perfecto: Todos A son B + X es A = X es B

¬øQuieres intentar otro ejercicio o prefieres que exploremos otro tipo de razonamiento?"""
        else:
            return f"""ü§î **Veamos tu respuesta:** "{user_input}"

üí° **Pista:** Recuerda la estructura deductiva:
‚Ä¢ Si TODOS los estudiantes universitarios tienen carnet...
‚Ä¢ Y Mar√≠a ES estudiante universitaria...
‚Ä¢ Entonces Mar√≠a ¬øqu√© debe tener?

La clave est√° en que "TODOS" incluye a Mar√≠a sin excepci√≥n. ¬øQuieres intentarlo de nuevo?"""

    def evaluate_inductive_practice(self, user_input):
        self.awaiting_response = None

        user_lower = user_input.lower()

        if any(word in user_lower for word in ["caf√©", "caliente", "siempre", "cafeter√≠a"]):
            pattern_identified = True
        else:
            pattern_identified = False

        if pattern_identified and any(word in user_lower for word in
                                      ["pero", "sin embargo", "limitaci√≥n", "excepci√≥n", "podr√≠a", "fin de semana"]):
            return """üåü **¬°Excelente an√°lisis inductivo!**

‚úÖ **Patr√≥n identificado correctamente:** "El caf√© de la cafeter√≠a siempre est√° caliente"

üéØ **Bonus por considerar limitaciones:** ¬°Muy bien pensado!

**Posibles limitaciones de esta generalizaci√≥n:**
‚Ä¢ üïê **Temporal:** ¬øQu√© pasa en horarios de cierre?
‚Ä¢ üìÖ **D√≠as especiales:** ¬øY los fines de semana o feriados?
‚Ä¢ ‚ö° **Fallas t√©cnicas:** ¬øSi se da√±a la m√°quina de caf√©?
‚Ä¢ üßπ **Mantenimiento:** ¬øDurante la limpieza diaria?

**üî¨ ¬øC√≥mo fortalecer la inducci√≥n?**
‚Ä¢ M√°s observaciones (observar por m√°s d√≠as)
‚Ä¢ Diversificar condiciones (diferentes horarios, d√≠as)
‚Ä¢ Considerar variables externas (clima, feriados, etc.)

¬°Has demostrado entender perfectamente tanto el poder como las limitaciones del razonamiento inductivo! ¬øQuieres explorar otro tema o profundizar m√°s en este?"""

        elif pattern_identified:
            return """üéâ **¬°Bien identificado el patr√≥n!**

‚úÖ **Tu generalizaci√≥n:** El caf√© de la cafeter√≠a est√°/siempre est√° caliente

ü§î **Pregunta adicional:** Muy buena observaci√≥n del patr√≥n, pero ¬øse te ocurre alguna situaci√≥n donde esta generalizaci√≥n podr√≠a fallar?

üí° **Pista:** Piensa en:
‚Ä¢ Diferentes horarios del d√≠a
‚Ä¢ D√≠as especiales o feriados  
‚Ä¢ Posibles fallas t√©cnicas
‚Ä¢ Variables que no hemos considerado

El razonamiento inductivo siempre debe considerar sus limitaciones. ¬øQu√© crees que podr√≠a hacer que el caf√© NO est√© caliente alg√∫n d√≠a?"""

        else:
            return f"""ü§î **Tu respuesta:** "{user_input}"

üí° **Gu√≠a para el razonamiento inductivo:**

**Paso 1:** ¬øQu√© tienen en com√∫n todas las observaciones?
‚Ä¢ Lunes: caf√© caliente
‚Ä¢ Martes: caf√© caliente  
‚Ä¢ Mi√©rcoles: caf√© caliente
‚Ä¢ Jueves: caf√© caliente

**Paso 2:** ¬øQu√© patr√≥n puedes identificar?
**Paso 3:** ¬øQu√© generalizaci√≥n har√≠as?
**Paso 4:** ¬øQu√© limitaciones podr√≠a tener esa generalizaci√≥n?

¬øQuieres intentarlo de nuevo enfoc√°ndote en lo que se repite en cada observaci√≥n?"""

    def process_input(self, user_input):
        """Procesa la entrada con manejo mejorado de conversaci√≥n"""
        if not user_input.strip():
            return "Por favor, escribe algo para que pueda ayudarte."

        # Extraer nombre si es la primera vez
        name_greeting = ""
        if not self.user_name:
            name_greeting = self.extract_user_name(user_input)

        # Primero verificar si es una respuesta de seguimiento
        if self.awaiting_response:
            follow_up_response = self.handle_follow_up(user_input)
            if follow_up_response:
                self.update_context(user_input, follow_up_response, "follow_up")
                return name_greeting + follow_up_response

        # Buscar patrones principales
        intent = self.match_pattern(user_input)

        if intent:
            response = self.get_contextual_response(intent, user_input)
            if name_greeting:
                response = name_greeting + response
        else:
            response = self.get_default_response(user_input)

        # Actualizar contexto
        self.update_context(user_input, response, intent)

        return response

    def match_pattern(self, user_input):
        """Busca patrones en la entrada del usuario"""
        user_input_lower = user_input.lower()

        for intent, data in self.patterns.items():
            for pattern in data["patterns"]:
                if re.search(pattern, user_input_lower):
                    return intent
        return None

    def get_contextual_response(self, intent, user_input):
        """Genera respuesta contextual, incluyendo funciones lambda"""
        responses = self.patterns[intent]["responses"]

        # Manejar respuestas que son funciones
        if callable(responses[0]):
            return responses[0]()

        # Respuestas normales
        if self.conversation_count == 0:
            response = responses[0]
        elif self.last_topic == intent:
            response = random.choice(responses[1:]) if len(responses) > 1 else responses[0]
        else:
            response = random.choice(responses)

        return response

    def get_default_response(self, user_input):
        """Respuestas por defecto m√°s inteligentes"""
        user_lower = user_input.lower()

        # Detectar temas espec√≠ficos en entrada no reconocida
        if any(word in user_lower for word in ["agente", "inteligente", "ia", "robot"]):
            return """ü§ñ **Sobre Agentes Inteligentes:**

Un agente inteligente es una entidad que:
‚Ä¢ **Percibe** su entorno (sensores)
‚Ä¢ **Procesa** la informaci√≥n (razonamiento)  
‚Ä¢ **Act√∫a** para lograr objetivos (actuadores)

Como yo mismo: percibo tu texto, proceso el significado, y genero respuestas √∫tiles.

¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico de los agentes inteligentes?"""

        elif any(word in user_lower for word in ["problema", "resolver", "soluci√≥n", "algoritmo"]):
            return """‚ö° **Sobre Resoluci√≥n de Problemas:**

Para resolver problemas sistem√°ticamente:
1. **Definir** el objetivo claramente
2. **Analizar** el estado actual  
3. **Identificar** acciones posibles
4. **Elegir** la mejor estrategia
5. **Ejecutar** y evaluar

¬øTienes alg√∫n problema espec√≠fico que te gustar√≠a resolver paso a paso?"""

        else:
            return f"""Interesante lo que dices: "{user_input}"

Mi especialidad es el razonamiento l√≥gico y la IA. Puedo ayudarte con:

üß† **Razonamiento Deductivo** - De lo general a lo espec√≠fico
üîç **Razonamiento Inductivo** - De lo espec√≠fico a lo general  
ü§ñ **Agentes Inteligentes** - C√≥mo funciona la IA
‚ö° **Resoluci√≥n de Problemas** - M√©todos sistem√°ticos

¬øCu√°l de estos temas te interesa m√°s?"""

    def extract_user_name(self, user_input):
        """Extrae el nombre del usuario"""
        name_patterns = [
            r"me llamo (\w+)",
            r"soy (\w+)",
            r"mi nombre es (\w+)",
            r"mi nombre: (\w+)"
        ]

        for pattern in name_patterns:
            match = re.search(pattern, user_input.lower())
            if match:
                self.user_name = match.group(1).title()
                return f"¬°Mucho gusto, {self.user_name}! "
        return ""

    def update_context(self, user_input, response, intent):
        """Actualiza el contexto de la conversaci√≥n"""
        self.context.append({
            "input": user_input,
            "response": response,
            "intent": intent,
            "timestamp": datetime.now(),
            "awaiting_response": self.awaiting_response
        })

        if len(self.context) > 15:  # Mantener m√°s contexto
            self.context.pop(0)

        self.conversation_count += 1
        self.last_topic = intent

    def get_conversation_summary(self):
        """Proporciona un resumen detallado de la conversaci√≥n"""
        if not self.context:
            return "No hemos conversado a√∫n."

        topics = [exchange.get("intent") for exchange in self.context if exchange.get("intent")]
        topic_counts = {}
        for topic in topics:
            if topic:
                topic_counts[topic] = topic_counts.get(topic, 0) + 1

        summary = f"üìä **Resumen de nuestra conversaci√≥n:**\n\n"
        summary += f"üí¨ **Mensajes intercambiados:** {len(self.context)}\n"

        if self.user_name:
            summary += f"üë§ **Usuario:** {self.user_name}\n"

        if topic_counts:
            summary += f"\n**üéØ Temas explorados:**\n"
            for topic, count in topic_counts.items():
                topic_name = topic.replace("_", " ").title()
                summary += f"‚Ä¢ {topic_name}: {count} veces\n"

            main_topic = max(topic_counts, key=topic_counts.get)
            summary += f"\n**üåü Tema principal:** {main_topic.replace('_', ' ').title()}"

        if self.awaiting_response:
            summary += f"\n\n‚è≥ **Estado actual:** Esperando tu respuesta sobre {self.awaiting_response.replace('_', ' ')}"

        return summary

    def reset_conversation(self):
        """Reinicia la conversaci√≥n"""
        self.context = []
        self.conversation_count = 0
        self.last_topic = None
        self.awaiting_response = None
        self.explanation_depth = 0
        return "üîÑ **Conversaci√≥n reiniciada.** ¬°Empecemos de nuevo! ¬øQu√© te gustar√≠a explorar sobre razonamiento l√≥gico o inteligencia artificial?"