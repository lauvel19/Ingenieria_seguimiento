import random


class IntelligentAgent:
    def __init__(self):
        self.context = []
        self.responses = {
            "greetings": {
                "patterns": ["hola", "hi", "buenos dÃ­as", "saludos"],
                "answers": [
                    "Â¡Hola! ðŸ˜Š Â¿En quÃ© puedo ayudarte hoy?",
                    "Â¡Buenos dÃ­as! ðŸŒž Â¿QuÃ© te gustarÃ­a explorar hoy?",
                    "Â¡Saludos! Estoy aquÃ­ para ayudarte con razonamiento lÃ³gico."
                ]
            },
            "how_are_you": {
                "patterns": ["cÃ³mo estÃ¡s", "quÃ© tal", "how are you"],
                "answers": [
                    "Â¡Estoy funcionando al 100%! Listo para ayudarte.",
                    "Como un programa de IA puede estar, Â¡excelente!",
                    "Siempre bien cuando puedo ayudar a alguien como tÃº."
                ]
            },
            "help": {
                "patterns": ["ayuda", "puedes ayudarme", "quÃ© puedes hacer"],
                "answers": [
                    "Claro que sÃ­. Puedo ayudarte con:\n- Razonamiento deductivo\n- Razonamiento inductivo\n- SoluciÃ³n de problemas\nÂ¿QuÃ© necesitas?",
                    "Puedo asistirte con anÃ¡lisis lÃ³gico. Por ejemplo:\n1. Si A=B y B=C, entonces A=C\n2. Identificar patrones en observaciones\nÂ¿En quÃ© te ayudo?",
                    "Mis capacidades incluyen:\nâ€¢ Analizar premisas\nâ€¢ Encontrar patrones\nâ€¢ Guiarte en problemas\nDime quÃ© necesitas."
                ]
            },
            "thanks": {
                "patterns": ["gracias", "thank you", "te lo agradezco"],
                "answers": [
                    "Â¡De nada! Siempre es un placer ayudar.",
                    "No hay de quÃ©. Â¿Necesitas algo mÃ¡s?",
                    "Â¡Gracias a ti por usar mis servicios! ðŸ˜Š"
                ]
            },
            "default": [
                "No estoy seguro de entender. Â¿PodrÃ­as reformular?",
                "Interesante pregunta. Sobre razonamiento lÃ³gico puedo ayudarte mejor.",
                "Puedo explicarte sobre deducciÃ³n, inducciÃ³n o resolver problemas. Â¿QuÃ© prefieres?"
            ]
        }

    def process_input(self, user_input):
        user_input = user_input.lower().strip(",.!?")
        response = None

        # Verificar patrones especiales primero
        for intent, data in self.responses.items():
            if any(pattern in user_input for pattern in data["patterns"]):
                response = random.choice(data["answers"])
                break

        # Respuesta por defecto si no coincide con patrones
        if not response:
            response = random.choice(self.responses["default"])

        # Mantener contexto de conversaciÃ³n
        self.context.append((user_input, response))
        if len(self.context) > 5:  # Limitar el historial
            self.context.pop(0)

        return response